// Generated by Dagger (https://dagger.dev).
package com.jnicovm.mercado_libre_prueba.useCases;

import com.jnicovm.mercado_libre_prueba.repository.SearchRepository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UseCaseModule_PerfomSearchFactory implements Factory<GetSearchUsesCases> {
  private final UseCaseModule module;

  private final Provider<SearchRepository> searchRepositoryProvider;

  public UseCaseModule_PerfomSearchFactory(UseCaseModule module,
      Provider<SearchRepository> searchRepositoryProvider) {
    this.module = module;
    this.searchRepositoryProvider = searchRepositoryProvider;
  }

  @Override
  public GetSearchUsesCases get() {
    return perfomSearch(module, searchRepositoryProvider.get());
  }

  public static UseCaseModule_PerfomSearchFactory create(UseCaseModule module,
      Provider<SearchRepository> searchRepositoryProvider) {
    return new UseCaseModule_PerfomSearchFactory(module, searchRepositoryProvider);
  }

  public static GetSearchUsesCases perfomSearch(UseCaseModule instance,
      SearchRepository searchRepository) {
    return Preconditions.checkNotNull(instance.perfomSearch(searchRepository), "Cannot return null from a non-@Nullable @Provides method");
  }
}
