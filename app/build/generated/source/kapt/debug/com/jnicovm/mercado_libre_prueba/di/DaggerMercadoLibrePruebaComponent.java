// Generated by Dagger (https://dagger.dev).
package com.jnicovm.mercado_libre_prueba.di;

import android.app.Application;
import com.jnicovm.mercado_libre_prueba.activities.searchActivities.SearchViewmodel;
import com.jnicovm.mercado_libre_prueba.dao.SearchDaoModule;
import com.jnicovm.mercado_libre_prueba.dao.SearchDaoModule_SearchDaoProviderFactory;
import com.jnicovm.mercado_libre_prueba.data.RemoteSearchDataSource;
import com.jnicovm.mercado_libre_prueba.repository.RepositoryModule;
import com.jnicovm.mercado_libre_prueba.repository.RepositoryModule_SearchRepositoryProviderFactory;
import com.jnicovm.mercado_libre_prueba.repository.SearchRepository;
import com.jnicovm.mercado_libre_prueba.retrofit.APIModules;
import com.jnicovm.mercado_libre_prueba.retrofit.APIModules_BaseUrlProviderFactory;
import com.jnicovm.mercado_libre_prueba.retrofit.APIModules_LoginRequestProviderFactory;
import com.jnicovm.mercado_libre_prueba.retrofit.APIModules_RemoteSearchDataSourceProviderFactory;
import com.jnicovm.mercado_libre_prueba.retrofit.RequestSearch;
import com.jnicovm.mercado_libre_prueba.useCases.GetSearchUsesCases;
import com.jnicovm.mercado_libre_prueba.useCases.UseCaseModule;
import com.jnicovm.mercado_libre_prueba.useCases.UseCaseModule_PerfomSearchFactory;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerMercadoLibrePruebaComponent implements MercadoLibrePruebaComponent {
  private final APIModules aPIModules;

  private final SearchDaoModule searchDaoModule;

  private final RepositoryModule repositoryModule;

  private final UseCaseModule useCaseModule;

  private Provider<String> baseUrlProvider;

  private DaggerMercadoLibrePruebaComponent(APIModules aPIModulesParam,
      RepositoryModule repositoryModuleParam, SearchDaoModule searchDaoModuleParam,
      UseCaseModule useCaseModuleParam, Application app) {
    this.aPIModules = aPIModulesParam;
    this.searchDaoModule = searchDaoModuleParam;
    this.repositoryModule = repositoryModuleParam;
    this.useCaseModule = useCaseModuleParam;
    initialize(aPIModulesParam, repositoryModuleParam, searchDaoModuleParam, useCaseModuleParam, app);
  }

  public static MercadoLibrePruebaComponent.Factory factory() {
    return new Factory();
  }

  private RequestSearch getRequestSearch() {
    return APIModules_LoginRequestProviderFactory.loginRequestProvider(aPIModules, baseUrlProvider.get());}

  private RemoteSearchDataSource getRemoteSearchDataSource() {
    return APIModules_RemoteSearchDataSourceProviderFactory.remoteSearchDataSourceProvider(aPIModules, getRequestSearch());}

  private SearchRepository getSearchRepository() {
    return RepositoryModule_SearchRepositoryProviderFactory.searchRepositoryProvider(repositoryModule, getRemoteSearchDataSource(), SearchDaoModule_SearchDaoProviderFactory.searchDaoProvider(searchDaoModule));}

  private GetSearchUsesCases getGetSearchUsesCases() {
    return UseCaseModule_PerfomSearchFactory.perfomSearch(useCaseModule, getSearchRepository());}

  @SuppressWarnings("unchecked")
  private void initialize(final APIModules aPIModulesParam,
      final RepositoryModule repositoryModuleParam, final SearchDaoModule searchDaoModuleParam,
      final UseCaseModule useCaseModuleParam, final Application app) {
    this.baseUrlProvider = DoubleCheck.provider(APIModules_BaseUrlProviderFactory.create(aPIModulesParam));
  }

  @Override
  public SearchComponent inject(SearchModule module) {
    Preconditions.checkNotNull(module);
    return new SearchComponentImpl(module);
  }

  private static final class Factory implements MercadoLibrePruebaComponent.Factory {
    @Override
    public MercadoLibrePruebaComponent create(Application app) {
      Preconditions.checkNotNull(app);
      return new DaggerMercadoLibrePruebaComponent(new APIModules(), new RepositoryModule(), new SearchDaoModule(), new UseCaseModule(), app);
    }
  }

  private final class SearchComponentImpl implements SearchComponent {
    private final SearchModule searchModule;

    private SearchComponentImpl(SearchModule module) {
      this.searchModule = module;
    }

    @Override
    public SearchViewmodel getSearchViewModel() {
      return SearchModule_LoginViewModelProviderFactory.loginViewModelProvider(searchModule, DaggerMercadoLibrePruebaComponent.this.getGetSearchUsesCases());}
  }
}
